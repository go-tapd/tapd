package webhook

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestBugEvent_BugCreateEvent(t *testing.T) {
	var event BugCreateEvent
	loadAndParseWebhookData(t, "bug/create.json", &event)

	assert.Equal(t, EventTypeBugCreate, event.Event)
	assert.Equal(t, "web", event.EventFrom)
	assert.Equal(t, "https://www.tapd.cn/tapd_fe/111222333/bug/list?confId=11111222333001048467", event.Referer)
	assert.Equal(t, "111222333", event.WorkspaceID)
	assert.Equal(t, "张三", event.CurrentUser)
	assert.Equal(t, "11111222333001039910", event.ID)
	assert.Equal(t, "123", event.Title)
	assert.Equal(t, "", event.IssueID)
	assert.Equal(t, "", event.IsNewStatus)
	assert.Equal(t, "", event.IsReplicate)
	assert.Equal(t, "", event.CreateLink)
	assert.Equal(t, "", event.IsJenkins)
	assert.Equal(t, "11111222333001000400", event.TemplateID)
	assert.Equal(t, "", event.Description)
	assert.Equal(t, "0", event.IterationID)
	assert.Equal(t, "", event.Severity)
	assert.Equal(t, "", event.Priority)
	assert.Equal(t, "", event.CustomFieldOne)
	assert.Equal(t, "", event.CustomFieldThree)
	assert.Equal(t, "", event.CustomFieldFour)
	assert.Equal(t, "", event.CustomField6)
	assert.Equal(t, "", event.CurrentOwner)
	assert.Equal(t, "", event.CC)
	assert.Equal(t, "", event.De)
	assert.Equal(t, "", event.Te)
	assert.Equal(t, "", event.Platform)
	assert.Equal(t, "", event.BugType)
	assert.Equal(t, "", event.OriginPhase)
	assert.Equal(t, "", event.Source)
	assert.Equal(t, "1", event.DescriptionType)
	assert.Equal(t, "111222333", event.ProjectID)
	assert.Equal(t, "0", event.IsDraft)
	assert.Equal(t, "", event.Begin)
	assert.Equal(t, "", event.Due)
	assert.Equal(t, "new", event.Status)
	assert.Equal(t, "张三", event.Reporter)
	assert.Equal(t, "new", event.Flows)
	assert.Equal(t, "", event.Resolution)
	assert.Equal(t, "", event.Resolved)
	assert.Equal(t, "", event.Closed)
	assert.Equal(t, "", event.InProgressTime)
	assert.Equal(t, "", event.VerifyTime)
	assert.Equal(t, "", event.RejectTime)
	assert.Equal(t, "", event.AuditTime)
	assert.Equal(t, "", event.SuspendTime)
	assert.Equal(t, "", event.Secret)
	assert.Equal(t, "", event.RioToken)
	assert.Equal(t, "http://websocket-proxy", event.DevProxyHost)
	assert.Equal(t, "318960837", event.QueueID)
	assert.Equal(t, "183736134", event.EventID)
	assert.Equal(t, "2024-12-30 18:24:53", event.Created)
}

func TestBugEvent_BugUpdateEvent(t *testing.T) {
	var event BugUpdateEvent
	loadAndParseWebhookData(t, "bug/update.json", &event)

	assert.Equal(t, EventTypeBugUpdate, event.Event)
	assert.Equal(t, "web", event.EventFrom)
	assert.Equal(t, "https://www.tapd.cn/tapd_fe/111222333/bug/list?confId=11111222333001048467", event.Referer)
	assert.Equal(t, "111222333", event.WorkspaceID)
	assert.Equal(t, "张三", event.CurrentUser)
	assert.Equal(t, "11111222333001039910", event.ID)
	assert.Equal(t, "11111222333001039910", event.OldID)
	assert.Equal(t, "0", event.OldSecretRootID)
	assert.Equal(t, "0", event.OldSid)
	assert.Equal(t, "111222333", event.OldProjectID)
	assert.Equal(t, "", event.OldParentID)
	assert.Equal(t, "123", event.OldTitle)
	assert.Equal(t, "", event.OldDescription)
	assert.Equal(t, "", event.OldMarkdownDescription)
	assert.Equal(t, "1", event.OldDescriptionType)
	assert.Equal(t, "", event.OldModule)
	assert.Equal(t, "", event.OldMilestone)
	assert.Equal(t, "张三", event.OldReporter)
	assert.Equal(t, "", event.OldDeadline)
	assert.Equal(t, "2024-12-30 18:24:53", event.OldCreated)
	assert.Equal(t, "", event.OldResolved)
	assert.Equal(t, "", event.OldClosed)
	assert.Equal(t, "2024-12-30 18:24:53", event.OldModified)
	assert.Equal(t, "张三", event.OldLastModify)
	assert.Equal(t, "", event.OldAuditer)
	assert.Equal(t, "", event.OldDe)
	assert.Equal(t, "", event.OldTe)
	assert.Equal(t, "", event.OldConfirmer)
	assert.Equal(t, "", event.OldCurrentOwner)
	assert.Equal(t, "", event.OldParticipator)
	assert.Equal(t, "", event.OldCloser)
	assert.Equal(t, "new", event.OldStatus)
	assert.Equal(t, "", event.OldResolution)
	assert.Equal(t, "", event.OldPriority)
	assert.Equal(t, "", event.OldSeverity)
	assert.Equal(t, "", event.OldCc)
	assert.Equal(t, "", event.OldEstimate)
	assert.Equal(t, "new", event.OldFlows)
	assert.Equal(t, "", event.OldVersionReport)
	assert.Equal(t, "", event.OldVersionTest)
	assert.Equal(t, "", event.OldVersionFix)
	assert.Equal(t, "", event.OldVersionClose)
	assert.Equal(t, "0", event.OldDelayed)
	assert.Equal(t, "", event.OldCustomFieldOne)
	assert.Equal(t, "", event.OldCustomFieldTwo)
	assert.Equal(t, "", event.OldCustomFieldThree)
	assert.Equal(t, "", event.OldCustomFieldFour)
	assert.Equal(t, "", event.OldCustomFieldFive)
	assert.Equal(t, "0", event.OldRegressionNumber)
	assert.Equal(t, "", event.OldIssueID)
	assert.Equal(t, "", event.OldSupportID)
	assert.Equal(t, "", event.OldSupportForumID)
	assert.Equal(t, "", event.OldCreatedFrom)
	assert.Equal(t, "", event.OldBaselineFind)
	assert.Equal(t, "", event.OldBaselineJoin)
	assert.Equal(t, "", event.OldBaselineClose)
	assert.Equal(t, "", event.OldCustomField98)
	assert.Equal(t, "", event.OldCustomField99)
	assert.Equal(t, "", event.OldCustomField100)
	assert.Equal(t, "0", event.OldCustomPlanField1)
	assert.Equal(t, "0", event.OldCustomPlanField2)
	assert.Equal(t, "0", event.OldCustomPlanField3)
	assert.Equal(t, "0", event.OldCustomPlanField4)
	assert.Equal(t, "0", event.OldCustomPlanField5)
	assert.Equal(t, "0", event.OldCustomPlanField6)
	assert.Equal(t, "0", event.OldCustomPlanField7)
	assert.Equal(t, "0", event.OldCustomPlanField8)
	assert.Equal(t, "0", event.OldCustomPlanField9)
	assert.Equal(t, "0", event.OldCustomPlanField10)
	assert.Equal(t, "11111222333001000400", event.OldTemplateID)
	assert.Equal(t, "", event.OldBegin)
	assert.Equal(t, "", event.OldDue)
	assert.Equal(t, "", event.OldReleaseID)
	assert.Equal(t, "", event.OldFixer)
	assert.Equal(t, "", event.OldCustomField199)
	assert.Equal(t, "", event.OldCustomField200)
	assert.Empty(t, event.NewID)
	assert.Empty(t, event.NewSecretRootID)
	assert.Empty(t, event.NewSid)
	assert.Empty(t, event.NewProjectID)
	assert.Empty(t, event.NewParentID)
	assert.Equal(t, "123222", event.NewTitle)
	assert.Empty(t, event.NewDescription)
	assert.Empty(t, event.NewClosed)
	assert.Equal(t, "2024-12-30 18:25:09", event.NewModified)
	assert.Empty(t, event.NewLastModify)
	assert.Empty(t, event.NewAuditer)
	assert.Empty(t, event.NewDe)
	assert.Empty(t, event.NewCustomFieldFive)
	assert.Equal(t, "title,modified", event.ChangeFields)
}

func TestBugEvent_BugDeleteEvent(t *testing.T) {
	var event BugDeleteEvent
	loadAndParseWebhookData(t, "bug/delete.json", &event)

	assert.Equal(t, EventTypeBugDelete, event.Event)
	assert.Equal(t, "web", event.EventFrom)
	assert.Equal(t, "https://www.tapd.cn/tapd_fe/111222333/bug/list?confId=11111222333001048467", event.Referer)
	assert.Equal(t, "111222333", event.WorkspaceID)
	assert.Equal(t, "张三", event.CurrentUser)
	assert.Equal(t, "11111222333001039910", event.ID)
	assert.Equal(t, "delete", event.OpType)
	assert.Equal(t, "0", event.OldIterationID)
	assert.Equal(t, "", event.Secret)
	assert.Equal(t, "", event.RioToken)
	assert.Equal(t, "http://websocket-proxy", event.DevProxyHost)
	assert.Equal(t, "318961099", event.QueueID)
	assert.Equal(t, "183736224", event.EventID)
	assert.Equal(t, "2024-12-30 18:25:29", event.Created)
}
